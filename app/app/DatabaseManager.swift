import Foundation
import GRDB

class DatabaseManager {
    static let shared = DatabaseManager()
    private var dbQueue: DatabaseQueue?

    private init() {
        setupDatabase()
    }

    private func setupDatabase() {
        do {
            let fileManager = FileManager.default
            let documentsURL = try fileManager.url(
                for: .documentDirectory,
                in: .userDomainMask,
                appropriateFor: nil,
                create: true
            )
            let dbURL = documentsURL.appendingPathComponent("app.db")
            copyDatabaseIfNeeded()



            // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π
            dbQueue = try DatabaseQueue(path: dbURL.path)
            createWardrobeTableIfNeeded()
            print("üì¶ –ë–∞–∑–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞: \(dbURL.path)")

        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: \(error)")
        }
        
        
        printAllTables()

    }

    /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ–±—Ä–∞–∑–æ–º –ø–æ –µ–≥–æ ID
    func fetchProducts(forLookId lookId: Int) -> [Product] {
        do {
            return try dbQueue?.read { db in
                // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–µ items –∏–∑ —Ç–∞–±–ª–∏—Ü—ã looks
                let row = try Row.fetchOne(db, sql: "SELECT items FROM looks WHERE id = ?", arguments: [lookId])
                guard let itemsString: String = row?["items"] else {
                    print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ items –¥–ª—è look id \(lookId)")
                    return []
                }

                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤ ID
                let itemIds = itemsString
                    .split(separator: ",")
                    .compactMap { Int($0.trimmingCharacters(in: .whitespaces)) }

                if itemIds.isEmpty {
                    print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è look id \(lookId)")
                    return []
                }

                // –§–æ—Ä–º–∏—Ä—É–µ–º SQL-–∑–∞–ø—Ä–æ—Å —Å IN (...)
                let placeholders = itemIds.map { _ in "?" }.joined(separator: ",")
                let sql = "SELECT id, name, color, price, store, url FROM products WHERE id IN (\(placeholders))"

                return try Product.fetchAll(db, sql: sql, arguments: StatementArguments(itemIds))
            } ?? []
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: \(error)")
            return []
        }
    }
    func printAllTables() {
        do {
            try dbQueue?.read { db in
                let tables = try String.fetchAll(db, sql: "SELECT name FROM sqlite_master WHERE type='table'")
                print("üìã –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ: \(tables)")
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü: \(error)")
        }
    }
    
    
    func copyDatabaseIfNeeded() {
        let fileManager = FileManager.default

        // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ Bundle
        guard let bundleURL = Bundle.main.url(forResource: "app", withExtension: "db") else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ app.db –≤ Bundle")
            return
        }

        // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ Documents
        let documentsURL = try! fileManager.url(for: .documentDirectory, in: .userDomainMask, appropriateFor: nil, create: false)
        let destinationURL = documentsURL.appendingPathComponent("app.db")

        // –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –µ—Å—Ç—å ‚Äî –Ω–µ –∫–æ–ø–∏—Ä—É–µ–º
        if fileManager.fileExists(atPath: destinationURL.path) {
            print("‚úÖ –ë–∞–∑–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Documents: \(destinationURL.path)")
            return
        }

        do {
            try fileManager.copyItem(at: bundleURL, to: destinationURL)
            print("‚úÖ –ë–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ Documents: \(destinationURL.path)")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–∞–∑—ã: \(error)")
        }
    }
    
    private func createWardrobeTableIfNeeded() {
        do {
            try dbQueue?.write { db in
                try db.create(table: "wardrobe", ifNotExists: true) { t in
                    t.autoIncrementedPrimaryKey("id")
                    t.column("color", .text).notNull()
                    t.column("type", .text).notNull()
                    t.column("image_path", .text).notNull()
                    t.column("created_at", .datetime).notNull()
                }
            }
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ wardrobe —Å–æ–∑–¥–∞–Ω–∞ (–µ—Å–ª–∏ –µ—ë –Ω–µ –±—ã–ª–æ)")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã wardrobe: \(error)")
        }
    }
    
    func insertWardrobeItem(_ item: WardrobeItem) {
        do {
            try dbQueue?.write { db in
                try item.insert(db)
            }
            print("‚úÖ –í–µ—â—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≥–∞—Ä–¥–µ—Ä–æ–±")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–µ—â–∏: \(error)")
        }
    }

    func fetchAllWardrobeItems() -> [WardrobeItem] {
        do {
            return try dbQueue?.read { db in
                try WardrobeItem.fetchAll(db)
            } ?? []
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–∞—Ä–¥–µ—Ä–æ–±–∞: \(error)")
            return []
        }
    }

    func deleteWardrobeItem(_ item: WardrobeItem) {
        guard let dbQueue2 = dbQueue else {
            print("–û—à–∏–±–∫–∞: dbQueue –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        }

        do {
            try dbQueue2.write { db in
                try item.delete(db)
            }
        } catch {
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ WardrobeItem: \(error)")
        }
    }


//    func calculateOwnedItemRatio(forLookId lookId: Int) -> Double {
//        do {
//            return try dbQueue?.read { db in
//                // 1. –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É items –∏–∑ —Ç–∞–±–ª–∏—Ü—ã looks
//                let row = try Row.fetchOne(db, sql: "SELECT items FROM looks WHERE id = ?", arguments: [lookId])
//                guard let itemsString: String = row?["items"] else {
//                    print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ items –¥–ª—è look id \(lookId)")
//                    return 0.0
//                }
//
//                // 2. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤ ID
//                let itemIds = itemsString
//                    .split(separator: ",")
//                    .compactMap { Int($0.trimmingCharacters(in: .whitespaces)) }
//
////                print(itemIds)
//                let itemsAmount = itemIds.count
//                if itemsAmount == 0 {
//                    print("‚ö†Ô∏è –û–±—Ä–∞–∑ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
//                    return 0.0
//                }
//
//                // 3. –ü–æ–ª—É—á–∞–µ–º type –∏ color –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã products
//                let placeholders = itemIds.map { _ in "?" }.joined(separator: ",")
//                let sql = "SELECT type, color FROM products WHERE id IN (\(placeholders))"
//                let productRows = try Row.fetchAll(db, sql: sql, arguments: StatementArguments(itemIds))
//
//                // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—ã (type, color) –≤ —Å–ø–∏—Å–æ–∫
//                var productTypeColorPairs: [(String, String)] = productRows.compactMap {
//                    guard let type: String = $0["type"], let color: String = $0["color"] else { return nil }
//                    return (type.lowercased(), color.lowercased())
//                }
////                print(productTypeColorPairs)
//
//                // 5. –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –≤–µ—â–∏ –∏–∑ –≥–∞—Ä–¥–µ—Ä–æ–±–∞
//                let wardrobeItems = try Row.fetchAll(db, sql: "SELECT type, color FROM wardrobe")
//
//                var existing = 0
//
//                for wardrobeRow in wardrobeItems {
//                    guard let wardrobeType: String = wardrobeRow["type"],
//                          let wardrobeColor: String = wardrobeRow["color"] else { continue }
////                    print(wardrobeType, wardrobeColor)
//                    // –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
//                    if let index = productTypeColorPairs.firstIndex(where: {
//                        $0.0 == wardrobeType.lowercased() && $0.1 == wardrobeColor.lowercased()
//                    }) {
//                        // –£–¥–∞–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å—á–∏—Ç—ã–≤–∞—Ç—å –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ
//                        productTypeColorPairs.remove(at: index)
//                        existing += 1
//                    }
//                }
//
//                return Double(existing) / Double(itemsAmount)
//
//            } ?? 0.0
//        } catch {
//            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –¥–æ–ª–∏ –≤–µ—â–µ–π: \(error)")
//            return 0.0
//        }
//    }

    func calculateOwnedItemRatio(forLookId lookId: Int) -> Double {
        do {
            return try dbQueue?.read { db in
                // 1. –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É items –∏–∑ —Ç–∞–±–ª–∏—Ü—ã looks
                let row = try Row.fetchOne(db, sql: "SELECT items FROM looks WHERE id = ?", arguments: [lookId])
                guard let itemsString: String = row?["items"] else {
                    print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ items –¥–ª—è look id \(lookId)")
                    return 0.0
                }

                // 2. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤ ID
                let itemIds = itemsString
                    .split(separator: ",")
                    .compactMap { Int($0.trimmingCharacters(in: .whitespaces)) }

                let itemsAmount = itemIds.count
                if itemsAmount == 0 {
                    print("‚ö†Ô∏è –û–±—Ä–∞–∑ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
                    return 0.0
                }

                // 3. –ü–æ–ª—É—á–∞–µ–º type –∏ color –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã products
                let placeholders = itemIds.map { _ in "?" }.joined(separator: ",")
                let sql = "SELECT type, color FROM products WHERE id IN (\(placeholders))"
                let productRows = try Row.fetchAll(db, sql: sql, arguments: StatementArguments(itemIds))

                // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—ã (type, color) –≤ —Å–ø–∏—Å–æ–∫
                var productTypeColorPairs: [(String, String)] = productRows.compactMap {
                    guard let type: String = $0["type"],
                          let color: String = $0["color"] else { return nil }

                    let cleanedType = type.trimmingCharacters(in: .whitespacesAndNewlines).lowercased()
                    let cleanedColor = color.trimmingCharacters(in: .whitespacesAndNewlines).lowercased()
                    return (cleanedType, cleanedColor)
                }

                // 5. –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –≤–µ—â–∏ –∏–∑ –≥–∞—Ä–¥–µ—Ä–æ–±–∞
                let wardrobeItems = try Row.fetchAll(db, sql: "SELECT type, color FROM wardrobe")

                var existing = 0

                for wardrobeRow in wardrobeItems {
                    guard let wardrobeType: String = wardrobeRow["type"],
                          let wardrobeColor: String = wardrobeRow["color"] else { continue }

                    let cleanedWardrobeType = wardrobeType.trimmingCharacters(in: .whitespacesAndNewlines).lowercased()
                    let cleanedWardrobeColor = wardrobeColor.trimmingCharacters(in: .whitespacesAndNewlines).lowercased()

                    // –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                    if let index = productTypeColorPairs.firstIndex(where: {
                        $0.0 == cleanedWardrobeType && $0.1 == cleanedWardrobeColor
                    }) {
                        // –£–¥–∞–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å—á–∏—Ç—ã–≤–∞—Ç—å –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ
                        productTypeColorPairs.remove(at: index)
                        existing += 1
                    }
                }

                return Double(existing) / Double(itemsAmount)

            } ?? 0.0
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –¥–æ–ª–∏ –≤–µ—â–µ–π: \(error)")
            return 0.0
        }
    }

    

}
