import Foundation
import GRDB

class DatabaseManager {
    static let shared = DatabaseManager()
    private var dbQueue: DatabaseQueue?

    private init() {
        setupDatabase()
    }

    private func setupDatabase() {
        do {
            let fileManager = FileManager.default
            let documentsURL = try fileManager.url(
                for: .documentDirectory,
                in: .userDomainMask,
                appropriateFor: nil,
                create: true
            )
            let dbURL = documentsURL.appendingPathComponent("app.db")

            // –ö–æ–ø–∏—Ä—É–µ–º –±–∞–∑—É –∏–∑ Bundle –≤ Documents, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
            if !fileManager.fileExists(atPath: dbURL.path) {
                if let bundleDBURL = Bundle.main.url(forResource: "app", withExtension: "db") {
                    try fileManager.copyItem(at: bundleDBURL, to: dbURL)
                    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ Documents")
                } else {
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ app.db –≤ Bundle")
                }
            }

            // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π
            dbQueue = try DatabaseQueue(path: dbURL.path)
            print("üì¶ –ë–∞–∑–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞: \(dbURL.path)")

        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: \(error)")
        }
        
        printAllTables()

    }

    /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ–±—Ä–∞–∑–æ–º –ø–æ –µ–≥–æ ID
    func fetchProducts(forLookId lookId: Int) -> [Product] {
        do {
            return try dbQueue?.read { db in
                // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–µ items –∏–∑ —Ç–∞–±–ª–∏—Ü—ã looks
                let row = try Row.fetchOne(db, sql: "SELECT items FROM looks WHERE id = ?", arguments: [lookId])
                guard let itemsString: String = row?["items"] else {
                    print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ items –¥–ª—è look id \(lookId)")
                    return []
                }

                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤ ID
                let itemIds = itemsString
                    .split(separator: ",")
                    .compactMap { Int($0.trimmingCharacters(in: .whitespaces)) }

                if itemIds.isEmpty {
                    print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è look id \(lookId)")
                    return []
                }

                // –§–æ—Ä–º–∏—Ä—É–µ–º SQL-–∑–∞–ø—Ä–æ—Å —Å IN (...)
                let placeholders = itemIds.map { _ in "?" }.joined(separator: ",")
                let sql = "SELECT id, name, color, price, store, url FROM products WHERE id IN (\(placeholders))"

                return try Product.fetchAll(db, sql: sql, arguments: StatementArguments(itemIds))
            } ?? []
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: \(error)")
            return []
        }
    }
    func printAllTables() {
        do {
            try dbQueue?.read { db in
                let tables = try String.fetchAll(db, sql: "SELECT name FROM sqlite_master WHERE type='table'")
                print("üìã –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ: \(tables)")
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü: \(error)")
        }
    }

}
